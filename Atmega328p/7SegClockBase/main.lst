GAS LISTING /tmp/ccrIcztd.s 			page 1


   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.stabs	"/home/edward/Microcontroller/Atmega328p/7SegClockBase/",100,0,2,.Ltext0
   8               		.stabs	"main.c",100,0,2,.Ltext0
   9               		.text
  10               	.Ltext0:
  11               		.stabs	"gcc2_compiled.",60,0,0,0
  12               		.stabs	"int:t(0,1)=r(0,1);-32768;32767;",128,0,0,0
  13               		.stabs	"char:t(0,2)=@s8;r(0,2);0;255;",128,0,0,0
  14               		.stabs	"long int:t(0,3)=@s32;r(0,3);020000000000;017777777777;",128,0,0,0
  15               		.stabs	"unsigned int:t(0,4)=r(0,4);0;0177777;",128,0,0,0
  16               		.stabs	"long unsigned int:t(0,5)=@s32;r(0,5);0;037777777777;",128,0,0,0
  17               		.stabs	"long long int:t(0,6)=@s64;r(0,6);01000000000000000000000;0777777777777777777777;",128,0,0,
  18               		.stabs	"long long unsigned int:t(0,7)=@s64;r(0,7);0;01777777777777777777777;",128,0,0,0
  19               		.stabs	"short int:t(0,8)=r(0,8);-32768;32767;",128,0,0,0
  20               		.stabs	"short unsigned int:t(0,9)=r(0,9);0;0177777;",128,0,0,0
  21               		.stabs	"signed char:t(0,10)=@s8;r(0,10);-128;127;",128,0,0,0
  22               		.stabs	"unsigned char:t(0,11)=@s8;r(0,11);0;255;",128,0,0,0
  23               		.stabs	"float:t(0,12)=r(0,1);4;0;",128,0,0,0
  24               		.stabs	"double:t(0,13)=r(0,1);4;0;",128,0,0,0
  25               		.stabs	"long double:t(0,14)=r(0,1);4;0;",128,0,0,0
  26               		.stabs	"short _Fract:t(0,15)=r(0,1);1;0;",128,0,0,0
  27               		.stabs	"long _Fract:t(0,16)=r(0,1);4;0;",128,0,0,0
  28               		.stabs	"long long _Fract:t(0,17)=r(0,1);8;0;",128,0,0,0
  29               		.stabs	"unsigned short _Fract:t(0,18)=r(0,1);1;0;",128,0,0,0
  30               		.stabs	"unsigned _Fract:t(0,19)=r(0,1);2;0;",128,0,0,0
  31               		.stabs	"unsigned long _Fract:t(0,20)=r(0,1);4;0;",128,0,0,0
  32               		.stabs	"unsigned long long _Fract:t(0,21)=r(0,1);8;0;",128,0,0,0
  33               		.stabs	"_Sat short _Fract:t(0,22)=r(0,1);1;0;",128,0,0,0
  34               		.stabs	"_Sat _Fract:t(0,23)=r(0,1);2;0;",128,0,0,0
  35               		.stabs	"_Sat long _Fract:t(0,24)=r(0,1);4;0;",128,0,0,0
  36               		.stabs	"_Sat long long _Fract:t(0,25)=r(0,1);8;0;",128,0,0,0
  37               		.stabs	"_Sat unsigned short _Fract:t(0,26)=r(0,1);1;0;",128,0,0,0
  38               		.stabs	"_Sat unsigned _Fract:t(0,27)=r(0,1);2;0;",128,0,0,0
  39               		.stabs	"_Sat unsigned long _Fract:t(0,28)=r(0,1);4;0;",128,0,0,0
  40               		.stabs	"_Sat unsigned long long _Fract:t(0,29)=r(0,1);8;0;",128,0,0,0
  41               		.stabs	"short _Accum:t(0,30)=r(0,1);2;0;",128,0,0,0
  42               		.stabs	"long _Accum:t(0,31)=r(0,1);8;0;",128,0,0,0
  43               		.stabs	"long long _Accum:t(0,32)=r(0,1);8;0;",128,0,0,0
  44               		.stabs	"unsigned short _Accum:t(0,33)=r(0,1);2;0;",128,0,0,0
  45               		.stabs	"unsigned _Accum:t(0,34)=r(0,1);4;0;",128,0,0,0
  46               		.stabs	"unsigned long _Accum:t(0,35)=r(0,1);8;0;",128,0,0,0
  47               		.stabs	"unsigned long long _Accum:t(0,36)=r(0,1);8;0;",128,0,0,0
  48               		.stabs	"_Sat short _Accum:t(0,37)=r(0,1);2;0;",128,0,0,0
  49               		.stabs	"_Sat _Accum:t(0,38)=r(0,1);4;0;",128,0,0,0
  50               		.stabs	"_Sat long _Accum:t(0,39)=r(0,1);8;0;",128,0,0,0
  51               		.stabs	"_Sat long long _Accum:t(0,40)=r(0,1);8;0;",128,0,0,0
  52               		.stabs	"_Sat unsigned short _Accum:t(0,41)=r(0,1);2;0;",128,0,0,0
  53               		.stabs	"_Sat unsigned _Accum:t(0,42)=r(0,1);4;0;",128,0,0,0
  54               		.stabs	"_Sat unsigned long _Accum:t(0,43)=r(0,1);8;0;",128,0,0,0
  55               		.stabs	"_Sat unsigned long long _Accum:t(0,44)=r(0,1);8;0;",128,0,0,0
  56               		.stabs	"void:t(0,45)=(0,45)",128,0,0,0
  57               		.stabs	"/usr/lib/avr/include/avr/io.h",130,0,0,0
GAS LISTING /tmp/ccrIcztd.s 			page 2


  58               		.stabs	"/usr/lib/avr/include/avr/sfr_defs.h",130,0,0,0
  59               		.stabs	"/usr/lib/avr/include/inttypes.h",130,0,0,0
  60               		.stabs	"/usr/lib/gcc/avr/4.8.1/include/stdint.h",130,0,0,0
  61               		.stabs	"/usr/lib/avr/include/stdint.h",130,0,0,0
  62               		.stabs	"int8_t:t(5,1)=(0,10)",128,0,121,0
  63               		.stabs	"uint8_t:t(5,2)=(0,11)",128,0,122,0
  64               		.stabs	"int16_t:t(5,3)=(0,1)",128,0,123,0
  65               		.stabs	"uint16_t:t(5,4)=(0,4)",128,0,124,0
  66               		.stabs	"int32_t:t(5,5)=(0,3)",128,0,125,0
  67               		.stabs	"uint32_t:t(5,6)=(0,5)",128,0,126,0
  68               		.stabs	"int64_t:t(5,7)=(0,6)",128,0,128,0
  69               		.stabs	"uint64_t:t(5,8)=(0,7)",128,0,129,0
  70               		.stabs	"intptr_t:t(5,9)=(5,3)",128,0,142,0
  71               		.stabs	"uintptr_t:t(5,10)=(5,4)",128,0,147,0
  72               		.stabs	"int_least8_t:t(5,11)=(5,1)",128,0,159,0
  73               		.stabs	"uint_least8_t:t(5,12)=(5,2)",128,0,164,0
  74               		.stabs	"int_least16_t:t(5,13)=(5,3)",128,0,169,0
  75               		.stabs	"uint_least16_t:t(5,14)=(5,4)",128,0,174,0
  76               		.stabs	"int_least32_t:t(5,15)=(5,5)",128,0,179,0
  77               		.stabs	"uint_least32_t:t(5,16)=(5,6)",128,0,184,0
  78               		.stabs	"int_least64_t:t(5,17)=(5,7)",128,0,192,0
  79               		.stabs	"uint_least64_t:t(5,18)=(5,8)",128,0,199,0
  80               		.stabs	"int_fast8_t:t(5,19)=(5,1)",128,0,213,0
  81               		.stabs	"uint_fast8_t:t(5,20)=(5,2)",128,0,218,0
  82               		.stabs	"int_fast16_t:t(5,21)=(5,3)",128,0,223,0
  83               		.stabs	"uint_fast16_t:t(5,22)=(5,4)",128,0,228,0
  84               		.stabs	"int_fast32_t:t(5,23)=(5,5)",128,0,233,0
  85               		.stabs	"uint_fast32_t:t(5,24)=(5,6)",128,0,238,0
  86               		.stabs	"int_fast64_t:t(5,25)=(5,7)",128,0,246,0
  87               		.stabs	"uint_fast64_t:t(5,26)=(5,8)",128,0,253,0
  88               		.stabs	"intmax_t:t(5,27)=(5,7)",128,0,273,0
  89               		.stabs	"uintmax_t:t(5,28)=(5,8)",128,0,278,0
  90               		.stabn	162,0,0,0
  91               		.stabn	162,0,0,0
  92               		.stabs	"int_farptr_t:t(3,1)=(5,5)",128,0,77,0
  93               		.stabs	"uint_farptr_t:t(3,2)=(5,6)",128,0,81,0
  94               		.stabn	162,0,0,0
  95               		.stabn	162,0,0,0
  96               		.stabs	"/usr/lib/avr/include/avr/fuse.h",130,0,0,0
  97               		.stabs	"__fuse_t:t(6,1)=(6,2)=s3low:(0,11),0,8;high:(0,11),8,8;extended:(0,11),16,8;;",128,0,244,0
  98               		.stabn	162,0,0,0
  99               		.stabn	162,0,0,0
 100               		.section	.rodata
 101               	.LC0:
 102 0000 FC        		.byte	-4
 103 0001 60        		.byte	96
 104 0002 DA        		.byte	-38
 105 0003 F2        		.byte	-14
 106 0004 66        		.byte	102
 107 0005 B6        		.byte	-74
 108 0006 3E        		.byte	62
 109 0007 E0        		.byte	-32
 110 0008 FE        		.byte	-2
 111 0009 E6        		.byte	-26
 112               		.section	.text.startup,"ax",@progbits
 113               		.stabs	"main:F(0,1)",36,0,32,main
 114               	.global	main
GAS LISTING /tmp/ccrIcztd.s 			page 3


 115               		.type	main, @function
 116               	main:
 117               		.stabd	46,0,0
   1:main.c        **** //7 segment clock based on DS1307 for timekeeping
   2:main.c        **** #define F_CPU 1000000
   3:main.c        **** #include <avr/io.h> //allows more human readable stuff
   4:main.c        **** #include <avr/interrupt.h>  //allows interrupts 
   5:main.c        **** #include <util/delay.h>
   6:main.c        **** 
   7:main.c        **** #include "ShiftOut.h"
   8:main.c        **** #include "IIC.h"
   9:main.c        **** #include "Timer0.h"
  10:main.c        **** 
  11:main.c        **** 
  12:main.c        **** //define pins for 7 seg output 
  13:main.c        **** #define LatchPin 3
  14:main.c        **** #define DataPin 4
  15:main.c        **** #define ClockPin 2
  16:main.c        **** 
  17:main.c        **** 
  18:main.c        **** //define button pins
  19:main.c        **** #define MilMask 0x08 //B3
  20:main.c        **** #define MilPin PINB
  21:main.c        **** #define HourPort PINB
  22:main.c        **** #define HourMask 0x02 //B1
  23:main.c        **** #define MinutePort PINB
  24:main.c        **** #define MinuteMask 0x04 //B2
  25:main.c        **** 
  26:main.c        **** 
  27:main.c        **** //define variables that will be affected by ISR
  28:main.c        **** volatile uint8_t HourButton = 0;
  29:main.c        **** volatile uint8_t MinuteButton = 0;
  30:main.c        **** 
  31:main.c        **** 
  32:main.c        **** int main(void){
 118               		.stabn	68,0,32,.LM0-.LFBB1
 119               	.LM0:
 120               	.LFBB1:
 121 0000 CF93      		push r28
 122 0002 DF93      		push r29
 123 0004 CDB7      		in r28,__SP_L__
 124 0006 DEB7      		in r29,__SP_H__
 125 0008 2A97      		sbiw r28,10
 126 000a 0FB6      		in __tmp_reg__,__SREG__
 127 000c F894      		cli
 128 000e DEBF      		out __SP_H__,r29
 129 0010 0FBE      		out __SREG__,__tmp_reg__
 130 0012 CDBF      		out __SP_L__,r28
 131               	/* prologue: function */
 132               	/* frame size = 10 */
 133               	/* stack size = 12 */
 134               	.L__stack_usage = 12
 135               	.LBB5:
 136               	.LBB6:
 137               		.stabs	"/usr/lib/avr/include/util/delay.h",132,0,0,.Ltext1
 138               	.Ltext1:
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
GAS LISTING /tmp/ccrIcztd.s 			page 4


   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib/avr/include/util/delay.h **** #endif
  41:/usr/lib/avr/include/util/delay.h **** 
  42:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib/avr/include/util/delay.h **** 
  46:/usr/lib/avr/include/util/delay.h **** /** \file */
  47:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib/avr/include/util/delay.h ****     \code
  49:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib/avr/include/util/delay.h ****     \endcode
  53:/usr/lib/avr/include/util/delay.h **** 
  54:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib/avr/include/util/delay.h ****     used.
  58:/usr/lib/avr/include/util/delay.h **** 
GAS LISTING /tmp/ccrIcztd.s 			page 5


  59:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib/avr/include/util/delay.h **** 
  68:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib/avr/include/util/delay.h **** 
  77:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib/avr/include/util/delay.h **** 
  81:/usr/lib/avr/include/util/delay.h **** */
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib/avr/include/util/delay.h **** #endif
  87:/usr/lib/avr/include/util/delay.h **** 
  88:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib/avr/include/util/delay.h **** #endif
  93:/usr/lib/avr/include/util/delay.h **** 
  94:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib/avr/include/util/delay.h **** #endif
  97:/usr/lib/avr/include/util/delay.h **** 
  98:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/lib/avr/include/util/delay.h **** #endif
 103:/usr/lib/avr/include/util/delay.h **** 
 104:/usr/lib/avr/include/util/delay.h **** /**
 105:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/lib/avr/include/util/delay.h **** 
 107:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/lib/avr/include/util/delay.h **** 
 109:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/lib/avr/include/util/delay.h **** 
 112:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/lib/avr/include/util/delay.h **** 
 114:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
GAS LISTING /tmp/ccrIcztd.s 			page 6


 116:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/lib/avr/include/util/delay.h **** 
 120:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/lib/avr/include/util/delay.h **** 
 125:/usr/lib/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/lib/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/lib/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/lib/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/lib/avr/include/util/delay.h **** 
 132:/usr/lib/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/lib/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/lib/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/lib/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/lib/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/lib/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/lib/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/lib/avr/include/util/delay.h **** 
 140:/usr/lib/avr/include/util/delay.h ****  */
 141:/usr/lib/avr/include/util/delay.h **** void
 142:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/lib/avr/include/util/delay.h **** {
 144:/usr/lib/avr/include/util/delay.h **** 	double __tmp ; 
 145:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 146:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 147:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 148:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 149:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 150:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 153:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 154:/usr/lib/avr/include/util/delay.h **** 
 155:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 156:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 157:/usr/lib/avr/include/util/delay.h **** 
 158:/usr/lib/avr/include/util/delay.h **** 	#else
 159:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 160:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 161:/usr/lib/avr/include/util/delay.h **** 	#endif
 162:/usr/lib/avr/include/util/delay.h **** 
 163:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 139               		.stabn	68,0,163,.LM1-.LFBB1
 140               	.LM1:
 141 0014 83ED      		ldi r24,lo8(12499)
 142 0016 90E3      		ldi r25,hi8(12499)
 143 0018 0197      		1: sbiw r24,1
 144 001a 01F4      		brne 1b
 145 001c 00C0      		rjmp .
 146 001e 0000      		nop
 147               	.LBE6:
GAS LISTING /tmp/ccrIcztd.s 			page 7


 148               	.LBE5:
 149               		.stabs	"main.c",132,0,0,.Ltext2
 150               	.Ltext2:
  33:main.c        ****   _delay_ms(50);
  34:main.c        ****   //set up output pins
  35:main.c        ****   DDRD = 0xFF;//DDRD |= (1 << 4) | (1 << 3) | (1 << 2);
 151               		.stabn	68,0,35,.LM2-.LFBB1
 152               	.LM2:
 153 0020 8FEF      		ldi r24,lo8(-1)
 154 0022 8AB9      		out 0xa,r24
  36:main.c        ****   DDRC = 0xFF;//DDRC |= (1 << 5) | (1 << 4);
 155               		.stabn	68,0,36,.LM3-.LFBB1
 156               	.LM3:
 157 0024 87B9      		out 0x7,r24
  37:main.c        ****   //define 7 seg output values
  38:main.c        ****   uint8_t numbers[] = {252,96,218,242,102,182,62,224,254,230};
 158               		.stabn	68,0,38,.LM4-.LFBB1
 159               	.LM4:
 160 0026 8AE0      		ldi r24,lo8(10)
 161 0028 E0E0      		ldi r30,lo8(.LC0)
 162 002a F0E0      		ldi r31,hi8(.LC0)
 163 002c DE01      		movw r26,r28
 164 002e 1196      		adiw r26,1
 165               		0:
 166 0030 0190      		ld r0,Z+
 167 0032 0D92      		st X+,r0
 168 0034 8A95      		dec r24
 169 0036 01F4      		brne 0b
  39:main.c        ****   //define clock iic address
  40:main.c        ****   uint8_t address = 0xD0; //1101000
  41:main.c        **** 
  42:main.c        **** 
  43:main.c        ****   //init clock chip (ds1307)
  44:main.c        ****   TWIInit();
 170               		.stabn	68,0,44,.LM5-.LFBB1
 171               	.LM5:
 172 0038 0E94 0000 		call TWIInit
  45:main.c        ****   TWIStart();
 173               		.stabn	68,0,45,.LM6-.LFBB1
 174               	.LM6:
 175 003c 0E94 0000 		call TWIStart
  46:main.c        ****   TWIWrite(address | (0<<0));
 176               		.stabn	68,0,46,.LM7-.LFBB1
 177               	.LM7:
 178 0040 80ED      		ldi r24,lo8(-48)
 179 0042 0E94 0000 		call TWIWrite
  47:main.c        ****   TWIWrite(0x00);
 180               		.stabn	68,0,47,.LM8-.LFBB1
 181               	.LM8:
 182 0046 80E0      		ldi r24,0
 183 0048 0E94 0000 		call TWIWrite
  48:main.c        ****   TWIWrite(0x00);
 184               		.stabn	68,0,48,.LM9-.LFBB1
 185               	.LM9:
 186 004c 80E0      		ldi r24,0
 187 004e 0E94 0000 		call TWIWrite
  49:main.c        ****   TWIStart();
GAS LISTING /tmp/ccrIcztd.s 			page 8


 188               		.stabn	68,0,49,.LM10-.LFBB1
 189               	.LM10:
 190 0052 0E94 0000 		call TWIStart
  50:main.c        ****   TWIWrite(address | (0<<0));
 191               		.stabn	68,0,50,.LM11-.LFBB1
 192               	.LM11:
 193 0056 80ED      		ldi r24,lo8(-48)
 194 0058 0E94 0000 		call TWIWrite
  51:main.c        ****   TWIWrite(0x07);
 195               		.stabn	68,0,51,.LM12-.LFBB1
 196               	.LM12:
 197 005c 87E0      		ldi r24,lo8(7)
 198 005e 0E94 0000 		call TWIWrite
  52:main.c        ****   TWIWrite(0x03);
 199               		.stabn	68,0,52,.LM13-.LFBB1
 200               	.LM13:
 201 0062 83E0      		ldi r24,lo8(3)
 202 0064 0E94 0000 		call TWIWrite
  53:main.c        ****   TWIStop();
 203               		.stabn	68,0,53,.LM14-.LFBB1
 204               	.LM14:
 205 0068 0E94 0000 		call TWIStop
  54:main.c        **** 
  55:main.c        **** 
  56:main.c        ****   //set up timer0
  57:main.c        ****   //  sei();
  58:main.c        ****   //  Timer0SetupMode(0x00);
  59:main.c        ****   //  Timer0SetupPrescale(0b01100000);
  60:main.c        ****   //  Timer0SetupInterrupt(0x20);
  61:main.c        ****   TCCR0A |= (0 << CS02);
 206               		.stabn	68,0,61,.LM15-.LFBB1
 207               	.LM15:
 208 006c 84B5      		in r24,0x24
 209 006e 84BD      		out 0x24,r24
  62:main.c        ****   TCCR0B |= (1 << CS01) | (1 << CS00);
 210               		.stabn	68,0,62,.LM16-.LFBB1
 211               	.LM16:
 212 0070 85B5      		in r24,0x25
 213 0072 8360      		ori r24,lo8(3)
 214 0074 85BD      		out 0x25,r24
  63:main.c        ****   TIMSK0 |= (1 << TOIE0);
 215               		.stabn	68,0,63,.LM17-.LFBB1
 216               	.LM17:
 217 0076 8091 6E00 		lds r24,110
 218 007a 8160      		ori r24,lo8(1)
 219 007c 8093 6E00 		sts 110,r24
  64:main.c        ****   sei(); 
 220               		.stabn	68,0,64,.LM18-.LFBB1
 221               	.LM18:
 222               	/* #APP */
 223               	 ;  64 "main.c" 1
 224 0080 7894      		sei
 225               	 ;  0 "" 2
 226               	/* #NOAPP */
 227               	.L10:
 228               	.LBB7:
  65:main.c        **** 
GAS LISTING /tmp/ccrIcztd.s 			page 9


  66:main.c        ****   while(1){  
  67:main.c        **** 
  68:main.c        ****     static uint8_t Minutes = 0, Hours = 0;
  69:main.c        ****     //read current time from clock
  70:main.c        ****     cli();
 229               		.stabn	68,0,70,.LM19-.LFBB1
 230               	.LM19:
 231               	/* #APP */
 232               	 ;  70 "main.c" 1
 233 0082 F894      		cli
 234               	 ;  0 "" 2
  71:main.c        ****     TWIStart();
 235               		.stabn	68,0,71,.LM20-.LFBB1
 236               	.LM20:
 237               	/* #NOAPP */
 238 0084 0E94 0000 		call TWIStart
  72:main.c        ****     TWIWrite(address | (0<<0));
 239               		.stabn	68,0,72,.LM21-.LFBB1
 240               	.LM21:
 241 0088 80ED      		ldi r24,lo8(-48)
 242 008a 0E94 0000 		call TWIWrite
  73:main.c        ****     TWIWrite(0x01);
 243               		.stabn	68,0,73,.LM22-.LFBB1
 244               	.LM22:
 245 008e 81E0      		ldi r24,lo8(1)
 246 0090 0E94 0000 		call TWIWrite
  74:main.c        ****     TWIStart();
 247               		.stabn	68,0,74,.LM23-.LFBB1
 248               	.LM23:
 249 0094 0E94 0000 		call TWIStart
  75:main.c        ****     TWIWrite(address | (1<<0));
 250               		.stabn	68,0,75,.LM24-.LFBB1
 251               	.LM24:
 252 0098 81ED      		ldi r24,lo8(-47)
 253 009a 0E94 0000 		call TWIWrite
  76:main.c        ****     Minutes = TWIReadACK();
 254               		.stabn	68,0,76,.LM25-.LFBB1
 255               	.LM25:
 256 009e 0E94 0000 		call TWIReadACK
 257 00a2 8093 0000 		sts Minutes.1529,r24
  77:main.c        ****     Hours = TWIReadNACK();
 258               		.stabn	68,0,77,.LM26-.LFBB1
 259               	.LM26:
 260 00a6 0E94 0000 		call TWIReadNACK
 261 00aa 8093 0000 		sts Hours.1530,r24
  78:main.c        ****     TWIStop();
 262               		.stabn	68,0,78,.LM27-.LFBB1
 263               	.LM27:
 264 00ae 0E94 0000 		call TWIStop
  79:main.c        ****     sei();
 265               		.stabn	68,0,79,.LM28-.LFBB1
 266               	.LM28:
 267               	/* #APP */
 268               	 ;  79 "main.c" 1
 269 00b2 7894      		sei
 270               	 ;  0 "" 2
  80:main.c        **** 
GAS LISTING /tmp/ccrIcztd.s 			page 10


  81:main.c        ****     //define state variables
  82:main.c        ****     static uint8_t HourAdd = 0, MinuteAdd = 0, HourState = 0, MinuteState = 0;
  83:main.c        ****     //define working variables
  84:main.c        ****     static uint8_t MinutesOnes = 0, MinutesTens = 0, HoursOnes = 0, HoursTens = 0;
  85:main.c        **** 
  86:main.c        ****     //separate digits from read values
  87:main.c        ****     MinutesOnes = Minutes & 0x0F;
 271               		.stabn	68,0,87,.LM29-.LFBB1
 272               	.LM29:
 273               	/* #NOAPP */
 274 00b4 8091 0000 		lds r24,Minutes.1529
 275 00b8 982F      		mov r25,r24
 276 00ba 9F70      		andi r25,lo8(15)
 277 00bc 9093 0000 		sts MinutesOnes.1535,r25
  88:main.c        ****     MinutesTens = (Minutes & 0x70) >> 4;
 278               		.stabn	68,0,88,.LM30-.LFBB1
 279               	.LM30:
 280 00c0 8077      		andi r24,lo8(112)
 281 00c2 90E0      		ldi r25,0
 282 00c4 24E0      		ldi r18,4
 283               		1:
 284 00c6 9595      		asr r25
 285 00c8 8795      		ror r24
 286 00ca 2A95      		dec r18
 287 00cc 01F4      		brne 1b
 288 00ce 8093 0000 		sts MinutesTens.1536,r24
  89:main.c        ****     HoursOnes = Hours & 0x0F;
 289               		.stabn	68,0,89,.LM31-.LFBB1
 290               	.LM31:
 291 00d2 8091 0000 		lds r24,Hours.1530
 292 00d6 982F      		mov r25,r24
 293 00d8 9F70      		andi r25,lo8(15)
 294 00da 9093 0000 		sts HoursOnes.1537,r25
  90:main.c        ****     HoursTens = (Hours & 0x30) >> 4;
 295               		.stabn	68,0,90,.LM32-.LFBB1
 296               	.LM32:
 297 00de 8073      		andi r24,lo8(48)
 298 00e0 90E0      		ldi r25,0
 299 00e2 34E0      		ldi r19,4
 300               		1:
 301 00e4 9595      		asr r25
 302 00e6 8795      		ror r24
 303 00e8 3A95      		dec r19
 304 00ea 01F4      		brne 1b
 305 00ec 8093 0000 		sts HoursTens.1538,r24
  91:main.c        **** 
  92:main.c        ****     //output to 7 segs
  93:main.c        ****     PORTD &= ~(1 << LatchPin);
 306               		.stabn	68,0,93,.LM33-.LFBB1
 307               	.LM33:
 308 00f0 5B98      		cbi 0xb,3
  94:main.c        ****     ShiftOut(ClockPin,DataPin,numbers[MinutesOnes]);
 309               		.stabn	68,0,94,.LM34-.LFBB1
 310               	.LM34:
 311 00f2 8091 0000 		lds r24,MinutesOnes.1535
 312 00f6 E1E0      		ldi r30,lo8(1)
 313 00f8 F0E0      		ldi r31,0
GAS LISTING /tmp/ccrIcztd.s 			page 11


 314 00fa EC0F      		add r30,r28
 315 00fc FD1F      		adc r31,r29
 316 00fe E80F      		add r30,r24
 317 0100 F11D      		adc r31,__zero_reg__
 318 0102 4081      		ld r20,Z
 319 0104 50E0      		ldi r21,0
 320 0106 64E0      		ldi r22,lo8(4)
 321 0108 70E0      		ldi r23,0
 322 010a 82E0      		ldi r24,lo8(2)
 323 010c 90E0      		ldi r25,0
 324 010e 0E94 0000 		call ShiftOut
  95:main.c        ****     ShiftOut(ClockPin,DataPin,numbers[MinutesTens]);
 325               		.stabn	68,0,95,.LM35-.LFBB1
 326               	.LM35:
 327 0112 8091 0000 		lds r24,MinutesTens.1536
 328 0116 E1E0      		ldi r30,lo8(1)
 329 0118 F0E0      		ldi r31,0
 330 011a EC0F      		add r30,r28
 331 011c FD1F      		adc r31,r29
 332 011e E80F      		add r30,r24
 333 0120 F11D      		adc r31,__zero_reg__
 334 0122 4081      		ld r20,Z
 335 0124 50E0      		ldi r21,0
 336 0126 64E0      		ldi r22,lo8(4)
 337 0128 70E0      		ldi r23,0
 338 012a 82E0      		ldi r24,lo8(2)
 339 012c 90E0      		ldi r25,0
 340 012e 0E94 0000 		call ShiftOut
  96:main.c        ****     ShiftOut(ClockPin,DataPin,numbers[HoursOnes]);
 341               		.stabn	68,0,96,.LM36-.LFBB1
 342               	.LM36:
 343 0132 8091 0000 		lds r24,HoursOnes.1537
 344 0136 E1E0      		ldi r30,lo8(1)
 345 0138 F0E0      		ldi r31,0
 346 013a EC0F      		add r30,r28
 347 013c FD1F      		adc r31,r29
 348 013e E80F      		add r30,r24
 349 0140 F11D      		adc r31,__zero_reg__
 350 0142 4081      		ld r20,Z
 351 0144 50E0      		ldi r21,0
 352 0146 64E0      		ldi r22,lo8(4)
 353 0148 70E0      		ldi r23,0
 354 014a 82E0      		ldi r24,lo8(2)
 355 014c 90E0      		ldi r25,0
 356 014e 0E94 0000 		call ShiftOut
  97:main.c        ****     ShiftOut(ClockPin,DataPin,numbers[HoursTens]);
 357               		.stabn	68,0,97,.LM37-.LFBB1
 358               	.LM37:
 359 0152 8091 0000 		lds r24,HoursTens.1538
 360 0156 E1E0      		ldi r30,lo8(1)
 361 0158 F0E0      		ldi r31,0
 362 015a EC0F      		add r30,r28
 363 015c FD1F      		adc r31,r29
 364 015e E80F      		add r30,r24
 365 0160 F11D      		adc r31,__zero_reg__
 366 0162 4081      		ld r20,Z
 367 0164 50E0      		ldi r21,0
GAS LISTING /tmp/ccrIcztd.s 			page 12


 368 0166 64E0      		ldi r22,lo8(4)
 369 0168 70E0      		ldi r23,0
 370 016a 82E0      		ldi r24,lo8(2)
 371 016c 90E0      		ldi r25,0
 372 016e 0E94 0000 		call ShiftOut
  98:main.c        ****     PORTD |= (1 << LatchPin);
 373               		.stabn	68,0,98,.LM38-.LFBB1
 374               	.LM38:
 375 0172 5B9A      		sbi 0xb,3
  99:main.c        **** 
 100:main.c        **** 
 101:main.c        ****     //signal if adding an hour, deal with hour state
 102:main.c        ****     if(HourButton && !HourState){
 376               		.stabn	68,0,102,.LM39-.LFBB1
 377               	.LM39:
 378 0174 8091 0000 		lds r24,HourButton
 379 0178 8823      		tst r24
 380 017a 01F0      		breq .L2
 381               		.stabn	68,0,102,.LM40-.LFBB1
 382               	.LM40:
 383 017c 8091 0000 		lds r24,HourState.1533
 384 0180 8111      		cpse r24,__zero_reg__
 385 0182 00C0      		rjmp .L2
 103:main.c        ****       HourAdd = 1;
 386               		.stabn	68,0,103,.LM41-.LFBB1
 387               	.LM41:
 388 0184 81E0      		ldi r24,lo8(1)
 389 0186 8093 0000 		sts HourAdd.1531,r24
 104:main.c        ****       HourState = 1;
 390               		.stabn	68,0,104,.LM42-.LFBB1
 391               	.LM42:
 392 018a 8093 0000 		sts HourState.1533,r24
 393 018e 00C0      		rjmp .L3
 394               	.L2:
 105:main.c        ****     }else if(!HourButton && HourState){
 395               		.stabn	68,0,105,.LM43-.LFBB1
 396               	.LM43:
 397 0190 8091 0000 		lds r24,HourButton
 398 0194 8111      		cpse r24,__zero_reg__
 399 0196 00C0      		rjmp .L3
 400               		.stabn	68,0,105,.LM44-.LFBB1
 401               	.LM44:
 402 0198 8091 0000 		lds r24,HourState.1533
 403 019c 8111      		cpse r24,__zero_reg__
 106:main.c        ****       HourState = 0;
 404               		.stabn	68,0,106,.LM45-.LFBB1
 405               	.LM45:
 406 019e 1092 0000 		sts HourState.1533,__zero_reg__
 407               	.L3:
 107:main.c        ****     }else {;}
 108:main.c        **** 
 109:main.c        ****     //signal if adding a minute, deal with minute state
 110:main.c        ****     if(MinuteButton && !MinuteState){
 408               		.stabn	68,0,110,.LM46-.LFBB1
 409               	.LM46:
 410 01a2 8091 0000 		lds r24,MinuteButton
 411 01a6 8823      		tst r24
GAS LISTING /tmp/ccrIcztd.s 			page 13


 412 01a8 01F0      		breq .L4
 413               		.stabn	68,0,110,.LM47-.LFBB1
 414               	.LM47:
 415 01aa 8091 0000 		lds r24,MinuteState.1534
 416 01ae 8111      		cpse r24,__zero_reg__
 417 01b0 00C0      		rjmp .L4
 111:main.c        ****       MinuteAdd = 1;
 418               		.stabn	68,0,111,.LM48-.LFBB1
 419               	.LM48:
 420 01b2 81E0      		ldi r24,lo8(1)
 421 01b4 8093 0000 		sts MinuteAdd.1532,r24
 112:main.c        ****       MinuteState = 1;
 422               		.stabn	68,0,112,.LM49-.LFBB1
 423               	.LM49:
 424 01b8 8093 0000 		sts MinuteState.1534,r24
 425 01bc 00C0      		rjmp .L5
 426               	.L4:
 113:main.c        ****     }else if(!MinuteButton && MinuteState){
 427               		.stabn	68,0,113,.LM50-.LFBB1
 428               	.LM50:
 429 01be 8091 0000 		lds r24,MinuteButton
 430 01c2 8111      		cpse r24,__zero_reg__
 431 01c4 00C0      		rjmp .L5
 432               		.stabn	68,0,113,.LM51-.LFBB1
 433               	.LM51:
 434 01c6 8091 0000 		lds r24,MinuteState.1534
 435 01ca 8111      		cpse r24,__zero_reg__
 114:main.c        ****       MinuteState = 0;
 436               		.stabn	68,0,114,.LM52-.LFBB1
 437               	.LM52:
 438 01cc 1092 0000 		sts MinuteState.1534,__zero_reg__
 439               	.L5:
 115:main.c        ****     }else {;}
 116:main.c        **** 
 117:main.c        **** 
 118:main.c        ****     //add an hour, account for base 10 stuff
 119:main.c        ****     if(HourAdd){
 440               		.stabn	68,0,119,.LM53-.LFBB1
 441               	.LM53:
 442 01d0 8091 0000 		lds r24,HourAdd.1531
 443 01d4 8823      		tst r24
 444 01d6 01F0      		breq .L6
 120:main.c        ****       HoursOnes += 1;
 445               		.stabn	68,0,120,.LM54-.LFBB1
 446               	.LM54:
 447 01d8 8091 0000 		lds r24,HoursOnes.1537
 448 01dc 8F5F      		subi r24,lo8(-(1))
 449 01de 8093 0000 		sts HoursOnes.1537,r24
 121:main.c        ****       if((HoursOnes == 4) && (HoursTens == 2)){
 450               		.stabn	68,0,121,.LM55-.LFBB1
 451               	.LM55:
 452 01e2 8430      		cpi r24,lo8(4)
 453 01e4 01F4      		brne .L7
 454               		.stabn	68,0,121,.LM56-.LFBB1
 455               	.LM56:
 456 01e6 8091 0000 		lds r24,HoursTens.1538
 457 01ea 8230      		cpi r24,lo8(2)
GAS LISTING /tmp/ccrIcztd.s 			page 14


 458 01ec 01F4      		brne .L8
 122:main.c        ****         HoursTens = 0;
 459               		.stabn	68,0,122,.LM57-.LFBB1
 460               	.LM57:
 461 01ee 1092 0000 		sts HoursTens.1538,__zero_reg__
 462 01f2 00C0      		rjmp .L29
 463               	.L7:
 123:main.c        ****         HoursOnes = 0;
 124:main.c        ****       }else if((HoursOnes == 10) && (HoursTens < 2)){
 464               		.stabn	68,0,124,.LM58-.LFBB1
 465               	.LM58:
 466 01f4 8A30      		cpi r24,lo8(10)
 467 01f6 01F4      		brne .L8
 468               		.stabn	68,0,124,.LM59-.LFBB1
 469               	.LM59:
 470 01f8 8091 0000 		lds r24,HoursTens.1538
 471 01fc 8230      		cpi r24,lo8(2)
 472 01fe 00F4      		brsh .L8
 125:main.c        ****         HoursTens += 1;
 473               		.stabn	68,0,125,.LM60-.LFBB1
 474               	.LM60:
 475 0200 8F5F      		subi r24,lo8(-(1))
 476 0202 8093 0000 		sts HoursTens.1538,r24
 477               	.L29:
 126:main.c        ****         HoursOnes = 0;
 478               		.stabn	68,0,126,.LM61-.LFBB1
 479               	.LM61:
 480 0206 1092 0000 		sts HoursOnes.1537,__zero_reg__
 481               	.L8:
 127:main.c        ****       }
 128:main.c        **** 
 129:main.c        ****       cli();
 482               		.stabn	68,0,129,.LM62-.LFBB1
 483               	.LM62:
 484               	/* #APP */
 485               	 ;  129 "main.c" 1
 486 020a F894      		cli
 487               	 ;  0 "" 2
 130:main.c        ****       TWIStart();
 488               		.stabn	68,0,130,.LM63-.LFBB1
 489               	.LM63:
 490               	/* #NOAPP */
 491 020c 0E94 0000 		call TWIStart
 131:main.c        ****       TWIWrite(address | (0<<0));
 492               		.stabn	68,0,131,.LM64-.LFBB1
 493               	.LM64:
 494 0210 80ED      		ldi r24,lo8(-48)
 495 0212 0E94 0000 		call TWIWrite
 132:main.c        ****       TWIWrite(0x02);
 496               		.stabn	68,0,132,.LM65-.LFBB1
 497               	.LM65:
 498 0216 82E0      		ldi r24,lo8(2)
 499 0218 0E94 0000 		call TWIWrite
 133:main.c        ****       TWIWrite(0x00 | (HoursTens << 4) | (HoursOnes << 0));
 500               		.stabn	68,0,133,.LM66-.LFBB1
 501               	.LM66:
 502 021c 8091 0000 		lds r24,HoursTens.1538
GAS LISTING /tmp/ccrIcztd.s 			page 15


 503 0220 20E1      		ldi r18,lo8(16)
 504 0222 829F      		mul r24,r18
 505 0224 C001      		movw r24,r0
 506 0226 1124      		clr __zero_reg__
 507 0228 9091 0000 		lds r25,HoursOnes.1537
 508 022c 892B      		or r24,r25
 509 022e 0E94 0000 		call TWIWrite
 134:main.c        ****       TWIStop();
 510               		.stabn	68,0,134,.LM67-.LFBB1
 511               	.LM67:
 512 0232 0E94 0000 		call TWIStop
 135:main.c        ****       sei();
 513               		.stabn	68,0,135,.LM68-.LFBB1
 514               	.LM68:
 515               	/* #APP */
 516               	 ;  135 "main.c" 1
 517 0236 7894      		sei
 518               	 ;  0 "" 2
 136:main.c        ****       HourAdd = 0;
 519               		.stabn	68,0,136,.LM69-.LFBB1
 520               	.LM69:
 521               	/* #NOAPP */
 522 0238 1092 0000 		sts HourAdd.1531,__zero_reg__
 523               	.L6:
 137:main.c        ****     }
 138:main.c        **** 
 139:main.c        ****     //add a minute, account for base 10 stuff
 140:main.c        ****     if(MinuteAdd){
 524               		.stabn	68,0,140,.LM70-.LFBB1
 525               	.LM70:
 526 023c 8091 0000 		lds r24,MinuteAdd.1532
 527 0240 8823      		tst r24
 528 0242 01F4      		brne .+2
 529 0244 00C0      		rjmp .L10
 141:main.c        ****       MinutesOnes += 1;
 530               		.stabn	68,0,141,.LM71-.LFBB1
 531               	.LM71:
 532 0246 8091 0000 		lds r24,MinutesOnes.1535
 533 024a 8F5F      		subi r24,lo8(-(1))
 534 024c 8093 0000 		sts MinutesOnes.1535,r24
 142:main.c        ****       if((MinutesOnes == 10) && (MinutesTens == 5)){
 535               		.stabn	68,0,142,.LM72-.LFBB1
 536               	.LM72:
 537 0250 8A30      		cpi r24,lo8(10)
 538 0252 01F4      		brne .L11
 539               		.stabn	68,0,142,.LM73-.LFBB1
 540               	.LM73:
 541 0254 8091 0000 		lds r24,MinutesTens.1536
 542 0258 8530      		cpi r24,lo8(5)
 543 025a 01F4      		brne .L12
 143:main.c        ****         MinutesTens = 0;
 544               		.stabn	68,0,143,.LM74-.LFBB1
 545               	.LM74:
 546 025c 1092 0000 		sts MinutesTens.1536,__zero_reg__
 547 0260 00C0      		rjmp .L30
 548               	.L12:
 144:main.c        ****         MinutesOnes = 0;
GAS LISTING /tmp/ccrIcztd.s 			page 16


 145:main.c        ****       }else if((MinutesOnes == 10) && (MinutesTens < 6)){
 549               		.stabn	68,0,145,.LM75-.LFBB1
 550               	.LM75:
 551 0262 8630      		cpi r24,lo8(6)
 552 0264 00F4      		brsh .L11
 146:main.c        ****         MinutesTens += 1;
 553               		.stabn	68,0,146,.LM76-.LFBB1
 554               	.LM76:
 555 0266 8F5F      		subi r24,lo8(-(1))
 556 0268 8093 0000 		sts MinutesTens.1536,r24
 557               	.L30:
 147:main.c        ****         MinutesOnes = 0;
 558               		.stabn	68,0,147,.LM77-.LFBB1
 559               	.LM77:
 560 026c 1092 0000 		sts MinutesOnes.1535,__zero_reg__
 561               	.L11:
 148:main.c        ****       }
 149:main.c        **** 
 150:main.c        ****       cli();
 562               		.stabn	68,0,150,.LM78-.LFBB1
 563               	.LM78:
 564               	/* #APP */
 565               	 ;  150 "main.c" 1
 566 0270 F894      		cli
 567               	 ;  0 "" 2
 151:main.c        ****       TWIStart();
 568               		.stabn	68,0,151,.LM79-.LFBB1
 569               	.LM79:
 570               	/* #NOAPP */
 571 0272 0E94 0000 		call TWIStart
 152:main.c        ****       TWIWrite(address | (0<<0));
 572               		.stabn	68,0,152,.LM80-.LFBB1
 573               	.LM80:
 574 0276 80ED      		ldi r24,lo8(-48)
 575 0278 0E94 0000 		call TWIWrite
 153:main.c        ****       TWIWrite(0x01);
 576               		.stabn	68,0,153,.LM81-.LFBB1
 577               	.LM81:
 578 027c 81E0      		ldi r24,lo8(1)
 579 027e 0E94 0000 		call TWIWrite
 154:main.c        ****       TWIWrite(0x00 | (MinutesTens << 4) | (MinutesOnes << 0));
 580               		.stabn	68,0,154,.LM82-.LFBB1
 581               	.LM82:
 582 0282 8091 0000 		lds r24,MinutesTens.1536
 583 0286 20E1      		ldi r18,lo8(16)
 584 0288 829F      		mul r24,r18
 585 028a C001      		movw r24,r0
 586 028c 1124      		clr __zero_reg__
 587 028e 9091 0000 		lds r25,MinutesOnes.1535
 588 0292 892B      		or r24,r25
 589 0294 0E94 0000 		call TWIWrite
 155:main.c        ****       TWIStop();
 590               		.stabn	68,0,155,.LM83-.LFBB1
 591               	.LM83:
 592 0298 0E94 0000 		call TWIStop
 156:main.c        ****       sei();
 593               		.stabn	68,0,156,.LM84-.LFBB1
GAS LISTING /tmp/ccrIcztd.s 			page 17


 594               	.LM84:
 595               	/* #APP */
 596               	 ;  156 "main.c" 1
 597 029c 7894      		sei
 598               	 ;  0 "" 2
 157:main.c        **** 
 158:main.c        ****       MinuteAdd = 0;
 599               		.stabn	68,0,158,.LM85-.LFBB1
 600               	.LM85:
 601               	/* #NOAPP */
 602 029e 1092 0000 		sts MinuteAdd.1532,__zero_reg__
 603 02a2 00C0      		rjmp .L10
 604               	.LBE7:
 605               		.size	main, .-main
 606               		.stabs	"numbers:(0,46)=ar(0,47)=r(0,47);0;0177777;;0;9;(5,2)",128,0,38,1
 607               		.stabn	192,0,0,.LFBB1-.LFBB1
 608               		.stabs	"Minutes:V(5,2)",38,0,68,Minutes.1529
 609               		.stabs	"Hours:V(5,2)",38,0,68,Hours.1530
 610               		.stabs	"HourAdd:V(5,2)",38,0,82,HourAdd.1531
 611               		.stabs	"MinuteAdd:V(5,2)",38,0,82,MinuteAdd.1532
 612               		.stabs	"HourState:V(5,2)",38,0,82,HourState.1533
 613               		.stabs	"MinuteState:V(5,2)",38,0,82,MinuteState.1534
 614               		.stabs	"MinutesOnes:V(5,2)",38,0,84,MinutesOnes.1535
 615               		.stabs	"MinutesTens:V(5,2)",38,0,84,MinutesTens.1536
 616               		.stabs	"HoursOnes:V(5,2)",38,0,84,HoursOnes.1537
 617               		.stabs	"HoursTens:V(5,2)",38,0,84,HoursTens.1538
 618               		.stabn	192,0,0,.LBB7-.LFBB1
 619               		.stabn	224,0,0,.LBE7-.LFBB1
 620               		.stabn	224,0,0,.Lscope1-.LFBB1
 621               	.Lscope1:
 622               		.stabs	"",36,0,0,.Lscope1-.LFBB1
 623               		.stabd	78,0,0
 624               		.text
 625               		.stabs	"__vector_16:F(0,45)",36,0,166,__vector_16
 626               	.global	__vector_16
 627               		.type	__vector_16, @function
 628               	__vector_16:
 629               		.stabd	46,0,0
 159:main.c        ****     }
 160:main.c        **** 
 161:main.c        **** 
 162:main.c        ****   }
 163:main.c        **** }
 164:main.c        **** 
 165:main.c        **** 
 166:main.c        **** ISR(TIMER0_OVF_vect){//ISR takes ~14 us, occurs every ~15ms
 630               		.stabn	68,0,166,.LM86-.LFBB2
 631               	.LM86:
 632               	.LFBB2:
 633 0000 1F92      		push r1
 634 0002 0F92      		push r0
 635 0004 0FB6      		in r0,__SREG__
 636 0006 0F92      		push r0
 637 0008 1124      		clr __zero_reg__
 638 000a 8F93      		push r24
 639               	/* prologue: Signal */
 640               	/* frame size = 0 */
GAS LISTING /tmp/ccrIcztd.s 			page 18


 641               	/* stack size = 4 */
 642               	.L__stack_usage = 4
 167:main.c        **** 
 168:main.c        ****   //check if button pressed and indicate either way
 169:main.c        ****   if(HourPort & HourMask){
 643               		.stabn	68,0,169,.LM87-.LFBB2
 644               	.LM87:
 645 000c 199B      		sbis 0x3,1
 646 000e 00C0      		rjmp .L33
 170:main.c        ****     HourButton = 1;
 647               		.stabn	68,0,170,.LM88-.LFBB2
 648               	.LM88:
 649 0010 81E0      		ldi r24,lo8(1)
 650 0012 8093 0000 		sts HourButton,r24
 651 0016 00C0      		rjmp .L34
 652               	.L33:
 171:main.c        ****   }else{
 172:main.c        ****     HourButton = 0;
 653               		.stabn	68,0,172,.LM89-.LFBB2
 654               	.LM89:
 655 0018 1092 0000 		sts HourButton,__zero_reg__
 656               	.L34:
 173:main.c        ****   }
 174:main.c        **** 
 175:main.c        ****   if(MinutePort & MinuteMask){
 657               		.stabn	68,0,175,.LM90-.LFBB2
 658               	.LM90:
 659 001c 1A9B      		sbis 0x3,2
 660 001e 00C0      		rjmp .L35
 176:main.c        ****     MinuteButton = 1;
 661               		.stabn	68,0,176,.LM91-.LFBB2
 662               	.LM91:
 663 0020 81E0      		ldi r24,lo8(1)
 664 0022 8093 0000 		sts MinuteButton,r24
 665 0026 00C0      		rjmp .L32
 666               	.L35:
 177:main.c        ****   }else{
 178:main.c        ****     MinuteButton = 0;
 667               		.stabn	68,0,178,.LM92-.LFBB2
 668               	.LM92:
 669 0028 1092 0000 		sts MinuteButton,__zero_reg__
 670               	.L32:
 671               	/* epilogue start */
 179:main.c        ****   } 
 180:main.c        **** 
 181:main.c        **** }
 672               		.stabn	68,0,181,.LM93-.LFBB2
 673               	.LM93:
 674 002c 8F91      		pop r24
 675 002e 0F90      		pop r0
 676 0030 0FBE      		out __SREG__,r0
 677 0032 0F90      		pop r0
 678 0034 1F90      		pop r1
 679 0036 1895      		reti
 680               		.size	__vector_16, .-__vector_16
 681               	.Lscope2:
 682               		.stabs	"",36,0,0,.Lscope2-.LFBB2
GAS LISTING /tmp/ccrIcztd.s 			page 19


 683               		.stabd	78,0,0
 684               		.local	MinuteAdd.1532
 685               		.comm	MinuteAdd.1532,1,1
 686               		.local	MinuteState.1534
 687               		.comm	MinuteState.1534,1,1
 688               		.local	HourAdd.1531
 689               		.comm	HourAdd.1531,1,1
 690               		.local	HourState.1533
 691               		.comm	HourState.1533,1,1
 692               		.local	HoursTens.1538
 693               		.comm	HoursTens.1538,1,1
 694               		.local	HoursOnes.1537
 695               		.comm	HoursOnes.1537,1,1
 696               		.local	MinutesTens.1536
 697               		.comm	MinutesTens.1536,1,1
 698               		.local	MinutesOnes.1535
 699               		.comm	MinutesOnes.1535,1,1
 700               		.local	Hours.1530
 701               		.comm	Hours.1530,1,1
 702               		.local	Minutes.1529
 703               		.comm	Minutes.1529,1,1
 704               	.global	MinuteButton
 705               		.section .bss
 706               		.type	MinuteButton, @object
 707               		.size	MinuteButton, 1
 708               	MinuteButton:
 709 0000 00        		.zero	1
 710               	.global	HourButton
 711               		.type	HourButton, @object
 712               		.size	HourButton, 1
 713               	HourButton:
 714 0001 00        		.zero	1
 715               		.stabs	"HourButton:G(0,48)=B(5,2)",32,0,28,0
 716               		.stabs	"MinuteButton:G(0,48)",32,0,29,0
 717               		.text
 718               		.stabs	"",100,0,0,.Letext0
 719               	.Letext0:
 720               		.ident	"GCC: (GNU) 4.8.1"
 721               	.global __do_copy_data
 722               	.global __do_clear_bss
GAS LISTING /tmp/ccrIcztd.s 			page 20


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccrIcztd.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccrIcztd.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccrIcztd.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccrIcztd.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccrIcztd.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccrIcztd.s:116    .text.startup:0000000000000000 main
     /tmp/ccrIcztd.s:701    .bss:000000000000000b Minutes.1529
     /tmp/ccrIcztd.s:699    .bss:000000000000000a Hours.1530
     /tmp/ccrIcztd.s:697    .bss:0000000000000009 MinutesOnes.1535
     /tmp/ccrIcztd.s:695    .bss:0000000000000008 MinutesTens.1536
     /tmp/ccrIcztd.s:693    .bss:0000000000000007 HoursOnes.1537
     /tmp/ccrIcztd.s:691    .bss:0000000000000006 HoursTens.1538
     /tmp/ccrIcztd.s:713    .bss:0000000000000001 HourButton
     /tmp/ccrIcztd.s:689    .bss:0000000000000005 HourState.1533
     /tmp/ccrIcztd.s:687    .bss:0000000000000004 HourAdd.1531
     /tmp/ccrIcztd.s:708    .bss:0000000000000000 MinuteButton
     /tmp/ccrIcztd.s:685    .bss:0000000000000003 MinuteState.1534
                             .bss:0000000000000002 MinuteAdd.1532
     /tmp/ccrIcztd.s:628    .text:0000000000000000 __vector_16

UNDEFINED SYMBOLS
TWIInit
TWIStart
TWIWrite
TWIStop
TWIReadACK
TWIReadNACK
ShiftOut
__do_copy_data
__do_clear_bss
